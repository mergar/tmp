#!/usr/local/bin/cbsd
#v11.0.16
CBSDMODULE="cpr"
MYARG="cdir pkglist dstdir"
MYOPTARG="ver arch basename batch stable new repoversion ccache pause makeconf append usegcc attach tmux_cpr inter"
MYDESC="Create pkg repository"
ADDHELP="ver=head for current.\n\
stable=1 for RELENG_X\n\
dstdir= path to output packages or 'repo' for update repoversion\n\
pkglist= path to ascii file with port list for install\n\
new= 1 - new repo (remove path (default)) or 0 - continue\n\
repoversion= name of repo version (ports cfg version), default for system set\n\
ccache=1 or 0 - enable ccache (default is 0, disabled)\n\
distcc=0 or 1 - enable distcc (default is 0, disabled)\n\
makeconf= path to alternative cpr_make.conf to /etc/make.conf in chroot\n\
pause=1 - make pause (for example for chroot in env) before create pkg\n\
append=1 - do not check for dstdir in not empty\n\
usegcc=path to gcc port\n"
#set -e

TRAP=""

#defines
_MYDIR=$( /usr/bin/dirname `/bin/realpath $0` )

. ${subr}
readconf buildworld.conf

. ${cbsdinit}

. ${distccacheconf}
. ${mailconf}
. ${distdir}/universe.subr

. ${buildconf}

[ -z "${pause}" ] && pause=0
[ -z "${batch}" ] && batch=0

[ ! -r ${etcdir}/cpr.conf -a -r ${_MYDIR}/etc-sample/cpr.conf ] && /bin/cp ${_MYDIR}/etc-sample/cpr.conf ${etcdir}/cpr.conf

show_tmux_session()
{
	tmuxcmd=$( which tmux 2>/dev/null )

	[ -z "${tmuxcmd}" ] && err 1 "${N1_COLOR}No such tmux${N0_COLOR}"

	${ECHO} "${N1_COLOR}Active cpr session:${N0_COLOR}"
	${tmuxcmd} list-sessions 2>/dev/null| /usr/bin/grep "\-cpr: " |cut -d : -f 1
	exit 0
}

post_action()
{
	if [ -r ${data}/tmp/cpr_error ]; then
		[ -r ${data}/tmp/build.log ] && /usr/bin/tail -n100 ${data}/tmp/build.log
		err 1 "${N1_COLOR}CPR failed. See log for detail: /tmp/build.log${N0_COLOR}"
	fi

	if [ "${pause}" = "1" ]; then
		${ECHO} "${N1_COLOR}Pause before create pkg.${N0_COLOR}"
		${ECHO} "${N1_COLOR}You can enter in jail via: ${N2_COLOR}cbsd jlogin ${jname}${N0_COLOR}"
		${ECHO} "${N1_COLOR}Press any key to continue.${N0_COLOR}"
		read pause
	fi

	${ECHO} "${N1_COLOR}Creating packages... ${N0_COLOR}"

	chroot ${path} /bin/sh << EOF
export PACKAGES=/packages

for i in \$( /usr/sbin/pkg query %n-%v ); do
	/usr/sbin/pkg create -n -g -f txz -o \${PACKAGES}/All/ \$i
done

cd \${PACKAGES}/All
/bin/rm -f digests.txz packagesite.txz repo.txz
pkg repo .
EOF

	TRAP="${TRAP} /bin/rm -f ${LOCKFILE} ${_tmppkglist};"
	trap "${TRAP}" HUP INT ABRT BUS TERM EXIT

	DT_END=$( /bin/date +%s )
	DT_DIFF=$(( DT_END - DT_START ))

	if [ "${dstdir}" = "repo" ]; then
		/usr/bin/find ${path}/packages/All -type f -name \*.txz -exec mv -f {} ${MYPKGDIR}/ \;
		ROOTPKGDIR="${MYPKGDIR}"
	else
		/usr/bin/find ${path}/packages/All -type f -name \*.txz -exec cp -n {} ${MYPKGDIR}/ \;
		bver=$( ${miscdir}/elf_tables --freebsdver ${path}/bin/sh )
		bosname=$( ${miscdir}/elf_tables --osname ${path}/bin/sh )
		barch=$( ${miscdir}/elf_tables --arch ${path}/bin/sh )

		case "${bosname}" in
			freebsd)
				bosname="FreeBSD"
				;;
			*)
				err 1 "${N1_COLOR}Unknown osname: ${N2_COLOR}${bosname}${N0_COLOR}"
				;;
		esac

		case "${barch}" in
			x86)
				barch="amd64"
				;;
			*)
				err 1 "${N1_COLOR}Unknown arch: ${N2_COLOR}${barch}${N0_COLOR}"
				;;
		esac

		ROOTPKGDIR="${dstdir}/${bosname}:${bver}:${barch}"

		[ -d "${ROOTPKGDIR}" ] && /bin/rm -rf ${ROOTPKGDIR}
		mkdir -p ${ROOTPKGDIR}

		echo "/bin/mv ${MYPKGDIR} ${ROOTPKGDIR}/All"
		/bin/mv ${MYPKGDIR} ${ROOTPKGDIR}/All
		#echo "ER"
		#mkdir -p ${ROOTPKGDIR}
		#echo "mv ${path}/packages/x ${ROOTPKGDIR}/"
		#mv ${path}/packages/* ${ROOTPKGDIR}/
		#echo "HE"
	fi

	# create pkg in symlinked /latest location (see pkg-repository(5))
	cd ${ROOTPKGDIR}
	/bin/ln -sf ./All ./latest
	cd ${ROOTPKGDIR}/All
	/usr/bin/find ./ -type f -name pkg-[0-9]* -exec ln -sf {} ./pkg.txz \;

	# for some reason pkg <bootstrap/install> trying to get
	# pkg from: <url>/FreeBSD:12:amd64/latest/Latest/pkg.txz

	if [ -h ${ROOTPKGDIR}/All/pkg.txz ]; then
		/bin/mkdir -p ${ROOTPKGDIR}/All/Latest
		orig_pkg=$( /bin/realpath ${ROOTPKGDIR}/All/pkg.txz )
		/bin/cp ${orig_pkg} ${ROOTPKGDIR}/All/Latest/pkg.txz
	fi

	jstop ${jname}

	send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch} ${repoversion} complete" -b "${DT_END}"
}


# $1 - src-session name
init_tmux()
{
	local src_session

	src_session="${1}"

	if [ "${tmux_cpr}" = "0" -o -z "${src_session}" ]; then
		tmux_cpr=0
		return 0
	fi

	tmuxcmd=$( which tmux 2>/dev/null )
	session_name="${src_session}"

	if [ -n "${tmuxcmd}" ]; then
		# tmux here and we preferred them
		return 0
	fi

	# no tmux here
	tmux_cpr=0
	return 0

}

umount_temp_dirs()
{
	# when error before path, we do not have any mounts by scripts
	[ -z "${path}" -o ! -d "${path}" ] && return 0

	umount_paths ${path}

	#destroy md disk when he used
	if [ "${CCACHEFS}" = "mdfs" -a -n "${MDDEV}" ]; then
		${ECHO} "${N1_COLOR}Destroy md drive: ${N2_COLOR}${MDDEV}${N0_COLOR}"
		/sbin/mdconfig -d -u ${MDDEV}
	fi
}


mount_temp_dirs()
{
	local _tmpfstab="${ftmpdir}/mount_temp_dirs.$$"

	TRAP="${TRAP} /bin/rm -f ${_tmpfstab};"
	trap "${TRAP}" HUP INT ABRT BUS TERM EXIT

	[ ! -d "${PORTSCFG_SRC}" ] && /bin/mkdir -p ${PORTSCFG_SRC}
	[ ! -d "${MYPKGDIR}" ] && /bin/mkdir -p ${MYPKGDIR}

	[ ! -d "${data}/root/system" ] && /bin/mkdir -p ${data}/root/system

	/bin/cat >> ${_tmpfstab} << EOF
procfs /proc procfs rw 0 0
${PORTSCFG_SRC} /var/db/ports ${NULLFS} rw 0 0
${MYPKGDIR} /tmp/packages ${NULLFS} rw 0 0
${workdir}/jails-system/${jname} /root/system ${NULLFS} rw 0 0
EOF

	if [ ${ccache} -eq 1 -a -n "${ccache_dir_source}" ]; then
		[ ! -d ${path}/root/.ccache ] && /bin/mkdir -p ${path}/root/.ccache
		/bin/cat >> ${_tmpfstab} << EOF
${ccache_dir_source} /root/.ccache ${NULLFS} rw 0 0
EOF
	fi

	mountfstab jroot=$path fstab=${_tmpfstab} jname="${jname}"
	/bin/rm -f ${_tmpfstab}
}


prepare_chroot()
{
	${ECHO} "${N1_COLOR}Building packages... ${N0_COLOR}"

	[ "${ccache}" = "1" ] && NEEDEDPORTS="${NEEDEDPORTS} /usr/ports/devel/ccache"
	[ "${distcc}" = "1" ] && NEEDEDPORTS="/usr/ports/devel/distcc ${NEEDEDPORTS}"
	export NEEDEDPORTS

	[ -n "${usegcc}" ] && export usegcc
	[ -f "${makeconf}" ] && /bin/cp ${makeconf} ${path}/etc/make.conf
	[ ! -r ${path}/etc/make.conf ] && /usr/bin/touch ${path}/etc/make.conf
	[ "${batch}" = "1" ] && /usr/sbin/sysrc -qf ${path}/etc/make.conf BATCH=no

	# remove default pkg.conf
	/bin/rm -f ${path}/etc/pkg/*.conf

	/bin/cp /etc/resolv.conf ${path}/etc

	/usr/bin/touch ${path}/etc/src.conf

	/usr/sbin/chroot $path /bin/sh << EOF
/usr/sbin/service ldconfig start
mv /etc/make.conf /tmp
pkg info -e pkg || env WITH_PKG=devel env BATCH=no env WRKDIRPREFIX=/tmp make -C /usr/ports/ports-mgmt/pkg-devel clean install
mv /tmp/make.conf /etc
# remove default pkg.conf
[ -f "/usr/local/etc/pkg.conf" ] && rm -f /usr/local/etc/pkg.conf
[ -d /tmp/usr/ports ] && /usr/bin/find /tmp/usr/ports -type d -name work -exec rm -rf {} \; > /dev/null 2>&1

if [ -n "\${usegcc}" ]; then
	env BATCH=no make -C \$usegcc install
	cp /etc/make.conf /tmp/mk.conf
	grep -v USE_GCC /tmp/mk.conf > /etc/make.conf
	echo USE_GCC=yes >> /etc/make.conf
fi

[ "${batch}" = "1" ] && /usr/sbin/sysrc -qf ${path}/etc/make.conf BATCH=no

for i in \${NEEDEDPORTS}; do
		PORTNAME=\$( make -C \$i -V PORTNAME )
		if [ -f /tmp/buildcontinue ]; then
			cd /tmp/packages
			pkg info -e \$PORTNAME >/dev/null 2>&1 || {
				[ -f \${PORTNAME}.txz ] && env ASSUME_ALWAYS_YES=yes pkg add -y ./\${PORTNAME}.txz && echo -e "\033[40;35m\${PORTNAME} found and added from cache. \033[0m"
			}
			pkg info -e \$PORTNAME || {
				make -C \$i clean
				make -C \$i
				make -C \$i install
			}
		else
			pkg info -e \$PORTNAME && continue
			echo "Installing \$PORTNAME from \$i "
			make -C \$i install clean
		fi
done
EOF
}

init_ccachedir_for_chroot()
{
	ccache_dir_source="${dbdir}/ccache/ccache-${arch}-${ver}-${stable}"
	${ECHO} "${N1_COLOR}Init ccache directory: ${N2_COLOR}${ccache_dir_source}${N1_COLOR}...${N0_COLOR}"
	[ ! -d "${path}/root/.ccache" ] && /bin/mkdir -p ${path}/root/.ccache
	[ ! -d "${ccache_dir_source}" ] && /bin/mkdir -p ${ccache_dir_source}
}


### MAIN
[ -z "${pkglist}" -o -z "${dstdir}" ] && show_tmux_session
[ -n "${tmux_cpr}" ] && orig_tmux_cpr="${tmux_cpr}"
readconf cpr.conf

init_target_arch
init_srcdir
init_supported_arch
init_basedir
init_kerneldir

#defaults
[ -z "${ccache}" ] && ccache=0
[ -z "${distcc}" ] && distcc=0

unset SRCCONF

[ -n "${orig_tmux_cpr}" ] && tmux_cpr="${orig_tmux_cpr}"
[ -z "${inter}" ] && inter="1"

if [ "$new" = "0" ]; then
	new=0
else
	new=1
fi

if [ -d "${dstdir}" ]; then
	if [ "${new}" = "1" -o "${append}" = "0" ]; then
		A=$( /bin/ls -1 ${dstdir}/ |/usr/bin/wc -l |/usr/bin/awk '{ printf $1 }' )
		[ "${A}" != "0" ] && ${ECHO} "${N1_COLOR}Warning: ${N2_COLOR}${dstdir}/${N1_COLOR} is not empty. Please clean before cpr initialization:${N0_COLOR}" && err 1 $( /bin/ls -1 ${dstdir} )
	fi
else
	/bin/mkdir -p "${dstdir}"
fi

if [ $( /usr/bin/uname -m ) = "i386" -a "${arch}" = "amd64" ]; then
	err 1 "Cannot install amd64 base on i386 hosts"
fi

[ -z "${makeconf}" ] && makeconf="${_MYDIR}/cpr_make.conf"
[ ! -f "${pkglist}" ] && err 1 "No pkglist file"

tpl_md5=$( /sbin/md5 -qs ${pkglist} )
md5_postfix=$( substr --pos=0 --len=5 --str=${tpl_md5} )
jname="cpr${md5_postfix}"

_tmppkglist=""

jstatus jname=${jname} >/dev/null 2>&1

if [ $? -eq 0 ]; then
	${ECHO} "${N1_COLOR}No such jail. Create from template: ${N2_COLOR}${jname}${N0_COLOR}"
	tpl="${_MYDIR}/cpr.jconf"
	[ ! -f "${tpl}" ] && err 1 "No such profile: ${tpl}"

	[ -z "${cbsd_workdir}" ] && . /etc/rc.conf
	[ -z "${cbsd_workdir}" ] && err 1 "${N1_COLOR}Empty cbsd_workdir variable${N0_COLOR}"

	tmpjconf=$( ${MKTEMP_CMD} )

	TRAP="${TRAP} /bin/rm -f ${tmpjconf};"
	trap "${TRAP}" HUP INT QUIT ABRT KILL ALRM TERM BUS EXIT

	/usr/bin/sed -e "s:#jname#:${jname}:g" \
	-e "s:#ver#:${ver}:g" \
	-e "s:#workdir#:${cbsd_workdir}:g" ${tpl} > ${tmpjconf}

	${ECHO} "${N1_COLOR}Obtain new jail: ${N2_COLOR}${jname}${N0_COLOR}"
	jcreate jconf=${tmpjconf} || err 1 "Error jail creation via tpl ${tpl}"

	pkg mode=bootstrap jname=${jname} ||true

	cat > ${workdir}/jails-system/${jname}/descr <<EOF
Created by cbsd cpr

Created: `/bin/date`
Pkg list: ${pkglist}

EOF
	jstart ${jname}
else
	${ECHO} "${N1_COLOR}Jail already created: ${N2_COLOR}${jname}${N0_COLOR}"
fi

. ${jrcconf}
[ "${baserw}" = "1" ] && path=${data}

if [ ${jid} -eq 0 ]; then
	${ECHO} "${N1_COLOR}Jail is not running. Starting... ${N2_COLOR}${jname}${N0_COLOR}"
	jstart ${jname}
fi

#[ -d "${path}" ] && umount_paths ${path} || true
#[ -d "${path}" -a $new -eq 1 ] && chflags -R noschg ${path} && rm -rf ${path}
#[ ! -d "${path}" -a $new -eq 0 ] && new=1
#[ ! -d "${path}" ] && /bin/mkdir ${path}
#[ $new -eq 1 ] && baserw=1 && populate_path ${BASE_DIR} ${path} ||true
#[ $new -eq 0 ] && touch ${path}/tmp/buildcontinue

[ ! -d "${PORTSCFG_SRC}" ] && /bin/mkdir -p $PORTSCFG_SRC

if [ -z "${repoversion}" -o "${repoversion}" = "default" ]; then
	PORTSCFG_SRC="/var/db/ports"
	MYPKGDIR="${PKGDIRROOT}/default"
else
	PORTSCFG_SRC="${dbdir}/ports-${repoversion}"
	MYPKGDIR="${PKGDIRROOT}/${repoversion}"
fi

init_tmux "${jname}-cpr"

if [ $tmux_cpr -eq 1 ]; then
	${tmuxcmd} list-sessions | ${GREP_CMD} -qwF "${session_name}:"
	if [ $? -eq 1 ]; then

		if [ ${ccache} -eq 1 ]; then
			if [ ! -x /usr/local/bin/ccache ]; then
				${ECHO} "Ccache enabled but /usr/local/bin/ccache not found, disable"
				ccache=0
			else
				echo "Go to init ccache"
				ccache_dir_prefix="cpr"
				init_ccache_dir
			fi
		fi

		# start action
		mount_temp_dirs
		#[ "${MOUNT_PORTS}" = "0" -a $new -eq 1 ] && chroot ${path} portsnap fetch extract
		prepare_chroot

		if [ ${ccache} -eq 1 -o ${distcc} -eq 1 ]; then
			prepare_make_conf ${makeconf} ${path}/etc/make.conf
		fi

		# make sure we have work dir in /tmp for parallel builds
		[ $( /usr/bin/grep ^WRKDIRPREFIX= ${path}/etc/make.conf| /usr/bin/wc -l )  = 0 ] && echo WRKDIRPREFIX=/tmp >> ${path}/etc/make.conf

		[ "${batch}" = "1" ] && /usr/sbin/sysrc -qf ${path}/etc/make.conf BATCH=no

		DT_START=$( /bin/date +%s )
		send_notification -s "[CBSD ${nodename}] cpr ${ver} ${arch} ${repoversion} started" -b "${DT_START}"
		/bin/cp ${_MYDIR}/cpr_packages.sh ${path}/tmp/cpr_packages.sh

		/usr/bin/grep -v "^#" ${pkglist} | /usr/bin/grep . > ${path}/tmp/ports_list.txt

		add_args=""
		[ ${ccache} -eq 1 ] && add_args="${add_args} -c 1"
		[ ${distcc} -eq 1 ] && add_args="${add_args} -d 1"

		jexec="cbsd jexec jname=${jname} sh /tmp/cpr_packages.sh ${add_args}"
		# start action

		${ECHO} "${N1_COLOR}${tmuxcmd} new -s ${N2_COLOR}${session_name}${N0_COLOR}"
		${tmuxcmd} new -s "${session_name}" "eval ${jexec}"
	else
		${tmuxcmd} attach-session -t "${session_name}"
	fi
else
	eval "${jexec}"
fi

if [ ${tmux_cpr} -eq 1 ]; then
	sleep 2	# lets wait for store /tmp/cpr_build_status.txt
	if [ -r ${path}/tmp/cpr_build_status.txt ]; then
		. ${path}/tmp/cpr_build_status.txt
		${ECHO} "${N1_COLOR}Progress: ${N2_COLOR}${pkg_left}/${pkg_all} ${N1_COLOR}(Failed: ${W2_COLOR}${FAILED}${N1_COLOR})${N0_COLOR}"
		${ECHO} "${N1_COLOR}Current build: ${N2_COLOR}${current_build}${N0_COLOR}"
		${ECHO} "${N1_COLOR}Failed: ${N2_COLOR}${FAILED}/${pkg_all}"
		[ "${FAILED}" != "0" ] && ${ECHO} "${N1_COLOR}Failed list: ${FAILED_LIST}${N0_COLOR}"
		exit 0
	fi
fi

#if [ $tmux_cpr -ne 1 ]; then
	post_action
#fi
